#!/usr/bin/awk -f
#####################################################################
#
# makeapot:  generate analytic potential files from scratch
#
####################################################################
#
#   Copyright 2009 Daniel Schopf
#             Institute for Theoretical and Applied Physics
#             University of Stuttgart, D-70550 Stuttgart, Germany
#             http://www.itap.physik.uni-stuttgart.de/
#
####################################################################
#
#   This file is part of potfit.
#
#   potfit is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   potfit is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with potfit; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor,
#   Boston, MA  02110-1301  USA
#
####################################################################
# $Revision: 1.16 $
# $Date: 2009/09/11 08:30:34 $
####################################################################
#
# Usage: makeapot <options>
# 	 -cp # 			enable chemical potential
# 	 -cn # [file] 		enable composition nodes
# 				if [file] exists, use compnodes to generate them
# 	 -co # 			cutoff
# 	 -n # type 		number of potentials of this type
# 				(_sc can be used)
# 		supported types:
# 		- eopp
#
# eg:    makeapot -cp -cn 5 MgZn.config -co 5 -n 3 eopp_sc
#
####################################################################

function write_header(n)
{
    print "#F 0 "n;
    printf "#I";
    for (i=0;i<n;i++)
	printf " 0";
    printf "\n#E\n\n";
}

function write_cp(n)
{
    for (i=0;i<n;i++)
	printf "cp_%d -1 -10 0\n",i;
}

function write_cn(n)
{
    print "cn "n;
    if (!system("[ -e "cn_file" ]")) {
	("compnodes -n "n" "cn_file) | getline x;
	split(x,mu);
    } else {
	for (i=0;i<n;i++)
	    mu[i+1]=(1/n)*(i+1);
    }
    for (i=0;i<n;i++)
	printf "%.3f -1 -10 0\n",mu[i+1];
}

function write_pot(name)
{
    printf "\n";
    print "type "name;
    print "cutoff "co;
    gsub("_sc$","",name);
    if (name=="eopp") {
	print "C_1 15 0.5 10000";
	print "eta_1 6 1 20";
	print "C_2 5 -100 100";
	print "eta_2 3 1 20";
	print "k 2.5 0 6";
	print "phi 3 0 6.3";
    }
    else if (name=="morse") {
	print "D 0.1 0 1";
	print "alpha 2 1 5";
	print "r_0 2.5 1 5";
    }
    else if (name=="power_decay") {
	print "a 1 0.1 10";
	print "b 2 1 5";
    }
    else if (name=="pohlong") {
	print "F_e -1 -10 10";
	print "gamma 2 0.1 10";
    }
    else if (name=="parabola") {
	print "alpha 1 -10 10";
	print "beta 1 -10 10";
	print "gamma 1 -10 10";
    }
    else if (name=="csw") {
	print "a_1 0.2 -20 20";
	print "a_2 0.2 -20 20";
	print "alpha 2 0 10";
	print "beta 3 0 10";
    }
    else if (name=="universal") {
	print "F_0 -1 -10 10";
	print "m 1 0 20";
	print "n 2 0 20";
	print "F_1 0 0 0";
    }
    else if (name=="lj") {
	print "epsilon 0.1 0 1";
	print "sigma 2.5 1 4";
    }
    else if (name=="softshell") {
	print "alpha 1 0.1 10";
	print "beta 2 1 5";
    }
    else if (name=="exp_decay") {
	print "epsilon 0.1 0 1";
	print "sigma 2.5 1 4";
    }
    else if (name=="eopp_exp") {
	print "C_1 15 0.5 10000";
	print "eta_1 6 1 20";
	print "C_2 5 -100 100";
	print "eta_2 3 1 20";
	print "k 2.5 0 6";
	print "phi 3 0 6.3";
    }
    else if (name=="meopp") {
	print "C_1 15 0.5 10000";
	print "eta_1 6 1 20";
	print "C_2 5 -100 100";
	print "eta_2 3 1 20";
	print "k 2.5 0 6";
	print "phi 3 0 6.3";
	print "r_0 0 -3 3";
    }

}

BEGIN{
    co = 7;
    j = 0;
    total_pot = 0;
    for (i=1;i<ARGC;i++) {
	if (ARGV[i]=="-cp")
	    enable_cp=1;
	if (ARGV[i]=="-cn") {
	    enable_cn=1;
	    cn=ARGV[i+1];
	    cn_file=ARGV[i+2];
	}
	if (ARGV[i]=="-n") {
	    total_pot+=ARGV[i+1];
	    for (k=0;k<ARGV[i+1];k++){
		pot[j]=ARGV[i+2];
		j++;
	    }
	}
	if (ARGV[i]=="-co")
	    co=ARGV[i+1];
    }
    write_header(total_pot);
    if (enable_cp) {
	write_cp(-0.5+sqrt(0.25+2*total_pot));
	if (enable_cn)
	    write_cn(cn);
    }
    for (i=0;i<total_pot;i++)
	write_pot(pot[i]);
    
}

