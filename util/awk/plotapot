#!/usr/bin/awk -f
#####################################################################
#
# plotapot: create gnuplot readable potential from
#	    from analytic potential file format
#
####################################################################
#
#   Copyright 2008-2009 Daniel Schopf
#             Institute for Theoretical and Applied Physics
#             University of Stuttgart, D-70550 Stuttgart, Germany
#             http://www.itap.physik.uni-stuttgart.de/
#
####################################################################
#
#   This file is part of potfit.
#
#   potfit is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   potfit is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with potfit; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor,
#   Boston, MA  02110-1301  USA
#
####################################################################
# $Revision: 1.18 $
# $Date: 2010/02/04 14:33:41 $
####################################################################
#
# Usage: plotpot pot_file_1 pot_file_2 ... pair_file
#
####################################################################

function abs(x)
{
	return x<0 ? -x : x
}

function write_pot(i,name,params,file)
{
	if (name == "universal" && abs(params[i","2]-params[i","3])<10e-6) {
		name = "pohlong";
		printf "Switched universal to pohlong in limit m->n\n";
	}
	if (i==0) {
	printf "cof(x) = x**4/(1+x**4);\n" > file;
	printf "pl " > file;}
	if (do_smooth[i])
		printf "cof((x-"cutoff[i]")/"params[i","n_param[i]]")*(" > file;
	if (name == "eopp") {
		printf "%f/x**%f+%f/x**%f*cos(%f*x+%f)",params[i","1],params[i","2],params[i","3],params[i","4],params[i","5],params[i","6] > file;
	} else if (name == "lj") {
	printf "4*%f*((%f/x)**12-(%f/x)**6)",params[i","1],params[i","2],params[i","2] > file;
} else if (name == "morse") {
printf "%f*(exp(-2*%f*(x-%f))-2*exp(-%f*(x-%f)))",params[i","1],params[i","2],params[i","3],params[i","2],params[i","3] > file;
    } else if (name == "softshell") {
    printf "(%f/x)**%f",params[i","1],params[i","2] > file;
    } else if (name == "eoppexp") {
    printf "%f*exp(-%f*x)+%f/x**%f*cos(%f*x+%f)",params[i","1],params[i","2],params[i","3],params[i","4],params[i","5],params[i","6] > file;
    } else if (name == "meopp") {
    printf "%f/(x-%f)**%f+%f/x**%f*cos(%f*x+%f)",params[i","1],params[i","7],params[i","2],params[i","3],params[i","4],params[i","5],params[i","6] > file;
    } else if (name == "pohlong") {
    printf "%f*(1-%f*log(x))*(x)**%f",params[i","1],params[i","2],params[i","2] > file;
    } else if (name == "power_decay") {
    printf "%f*(1/x)**%f",params[i","1],params[i","2] > file;
    } else if (name == "parabola") {
    printf "%f*x**2+%f*x+%f",params[i","1],params[i","2],params[i","3] > file;
    } else if (name == "csw") {
    printf "(1+%f*cos(%f*x)+%f*sin(%f*x))/x**%f",params[i","1],params[i","3],params[i","2],params[i","3],params[i","4] > file;
    } else if (name == "universal") {
    printf "%f*(%f/(%f-%f)*x**%f-%f/(%f-%f)*x**%f)+%f*x",params[i","1],params[i","3],params[i","3],params[i","2],params[i","2],params[i","2],params[i","3],params[i","2],params[i","3],params[i","4] > file;
    }
    if (do_smooth[i])
	    printf ")" > file;
    printf " w l" > file;
    if (have_species)
	    printf " t \"%s\"",elements[i+1] > file;
}

function read_pot(name)
{
	if (name=="eopp")
		return 6;
	else if (name=="lj")
		return 2;
	else if (name=="morse")
		return 3;
	else if (name=="softshell")
		return 2;
	else if (name=="eoppexp")
		return 6;
	else if (name=="meopp")
		return 7;
	else if (name=="power_decay")
		return 2;
	else if (name=="pohlong")
		return 2;
	else if (name=="parabola")
		return 3;
	else if (name=="csw")
		return 4;
	else if (name=="universal")
		return 4;
}

BEGIN {
	count=0;
	mindist=10;
	maxdist=0;
	#ORS="";
	eam = 0;
	for (i=0;i<ARGC;i++) 
		if (ARGV[i]=="-eam") {
			eam = 1;
			ARGV[i]="";
		}
	}

	{
		if (substr($0,3,6)=="radial") {
			n_rad = $6;
			dist_file = ARGV[ARGIND];
			nextfile;
		}
		else {
			while (substr($0,2,1)!="F") getline;
		if ($2 != 0) {
			print "Error - wrong potential format of " ARGV[ARGIND] "\n" ;
			exit 2;
		}
		total_pots=$3;
		if (int(total_pots)!=total_pots) {
			print "ERROR - incorrect potential file " ARGV[ARGIND]  "\n" ;
			exit 2;
		}
		getline;
		if (substr($0,2,1)=="C") {
			title=$0;
			sub("#C ","",title);
			gsub(" ","-",title);
			saved_title=title;
			getline;
			chem_species=$0;
			sub("## ","",chem_species);
			split(chem_species,elements," ");
			have_species=1;
		}
		for (i=count;i<(count+total_pots);i++){
			while ( substr($0,1,4)!="type" && substr($0,1,6)!="global" ) getline;
			if (substr($0,1,6)=="global") {
				n_glob = $2;
				getline;
				for (j=0;j<n_glob;j++) {
					glob[$1]=$2;
					getline;
					}
				while (substr($0,1,4)!="type") getline;
			}
			pot_name[i] = $2;
			if (match(pot_name[i],"_sc$",arr)>0) {
				pot_name[i] = substr(pot_name[i],1,length(pot_name[i])-3);
				do_smooth[i]=1;
			}
			n_param[i]=read_pot(pot_name[i]);
			if (do_smooth[i]==1)
				n_param[i]++;
			getline;
			cutoff[i]=$2;
			if ($2>maxdist)
				maxdist=$2;
			getline;
			if (substr($0,1,1)=="#") {
				if ($3<mindist)
					mindist=$3;
				if ($5>maxdist)
					maxdist=$5;
				getline;
			}
			while (substr($0,1,1)=="#") {
				getline;
			}
			for (l=1;l<=n_param[i];l++) {
				global = match($1,"!",arr);
				if (global>0)
					params[i "," l] = glob[substr($1,1,length($1)-1)];
				else
					params[i "," l] = $2;
				if (l<n_param[i])
				getline;
			}
		}
		count = count + total_pots;
	}
}

END {
	pair_count = count;
	if (eam && count == 3) {
		count = count - 1;
		eam_count = 1;
		pair_count = 1;
	}
	if (count == 7) {
		count = count - 2;
		eam_count = 2;
		pair_count = 3;
	}
	if (count == 12) {
		count = count - 3;
		eam_count = 3;
		pair_count = 6;
	}
	if (mindist == 10)
		mindist = 2;
	if (count != 0) {
		printf "reset;\n" > "plot";
		printf "set samples 1000;\n" > "plot";
		printf "set grid;\n" > "plot";
		printf "set xrange [" 0.5*mindist ":" maxdist*1.01 "];\n" > "plot";
		printf "set yrange [-.3:.5];\n" > "plot";
		for (i=0;i<count;i++) {
			write_pot(i,pot_name[i],params,"plot");
			if (i<pair_count)
				printf " ls 1 lc "i > "plot";
			else
				printf " ls 2 lc "(i-pair_count) > "plot";
			if (i!=(count-1))
				printf ", " > "plot";
		}
		if (dist_file != "") {
			printf ", " > "plot";
			for (i=0;i<n_rad;i++) {
				if (have_species)
					label = elements[i+1];
				else 
					label = "pot "i;
				if (i==0)
					printf "'" dist_file "' i " i " w lines t \"rad_dist " label "\"" > "plot";
				else
					printf "'' i " i " w lines t \"rad_dist " label "\"" > "plot";
				if (i!=(n_rad-1))
					printf ", " > "plot";
			}
		}
	}
	if (eam_count > 0) {
		printf "reset;\n" > "plot_eam";
		printf "set samples 1000;\n" > "plot_eam";
		printf "set grid;\n" > "plot_eam";
		printf "set xrange [0:2]\n" > "plot_eam";
		printf "pl " > "plot_eam";
		for (i=count;i<(count+eam_count);i++) {
			write_pot(i,pot_name[i],params,"plot_eam");
			printf " ls 1 lc "(i-count) > "plot_eam";
			if (i!=(count+eam_count-1))
				printf ", " > "plot_eam";
		}
		printf ";" > "plot_eam";
		title = saved_title" embedding function";
		system("gnuplot -persist -title \""title"\" plot_eam");
	}
		if (eam_count > 0)
			title = title" pair potential and transfer function";
		else
			title = saved_title" pair potential";
		system("gnuplot -persist -title \""title"\" plot");
}
