#!/usr/bin/awk -f
#####################################################################
#
# compnodes:    calculates compositions of configurations
# 		and proposes some composition nodes
#
####################################################################
#
#   Copyright 2009 Daniel Schopf
#             Institute for Theoretical and Applied Physics
#             University of Stuttgart, D-70550 Stuttgart, Germany
#             http://www.itap.physik.uni-stuttgart.de/
#
####################################################################
#
#   This file is part of potfit.
#
#   potfit is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   potfit is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with potfit; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor,
#   Boston, MA  02110-1301  USA
#
####################################################################
# $Revision: 1.1 $
# $Date: 2009/03/11 11:52:33 $
####################################################################
#
# Usage: compnodes config.file
#
####################################################################

function reduce_nodes(n,nodes,weights,new_nodes)
{
	for (i=0;i<n;i++) {
		nodes[i]=(nodes[i]*weights[i]+nodes[i+1]*weights[i+1])/(weights[i]+weights[i+1]);
		weights[i]+=weights[i+1];
	}
}

function sort(to_sort,to_change,n,nr)
{
	false=0
	true=1
	readyflag=false;

	j=0;
	while (readyflag==false)
	{
		readyflag=true;
		for (i=1;i<n;i++) {
			if ((to_sort[i-1]/to_change[i-1])>(to_sort[i]/to_change[i]))
			{
				temp=to_sort[i-1];
				temp2=to_change[i-1];
				to_sort[i-1]=to_sort[i];
				to_change[i-1]=to_change[i];
				to_sort[i]=temp;
				to_change[i]=temp2;
				readyflag=false;
			}

		}
	}
}


function list_conf(ntot,conc,n,conf) {
	printf "Listing "n" configurations with 2 atom types:\n";
	printf "conf\tc[0]\tc[1]\tn[0]\tn[1]\n";
	for (i=0;i<n;i++)
		printf "%d\t%.3f\t%.3f\t%d\t%d\n",conf[i]+1,conc[i]/ntot[i],1-conc[i]/ntot[i],conc[i],ntot[i]-conc[i];
}

BEGIN {
	n=0; 			# number of configuration
	max=0; 			# ntypes
	if (ARGV[1]=="-l") {
		list=1;
		delete ARGV[1];
	} else if (ARGV[1]=="-la") {
	listall=1;
	delete ARGV[1];
} else list=0;
}

{
	if (substr($1,1,1)=="#") {
		nconf[n,"tot"]=$2;
		while (substr($1,2,1)!="F") getline;
		getline;
		for (i=0;i<(nconf[n,"tot"]-1);i++) {
			if ($1>max) max=$1;
			nconf[n,$1]++;
			getline;
		}
		if ($1>max) max=$1;
		nconf[n,$1]++;
		n++;
	} else {
	nconf[n,"tot"]=$1;
	getline; getline; getline; getline; getline; getline;
	for (i=0;i<(nconf[n,"tot"]-1);i++) {
		if ($1>max) max=$1;
		nconf[n,$1]++;
		getline;
	}
	if ($1>max) max=$1;
	nconf[n,$1]++;
	n++;
}

}

END {
	if (max==2) {
		print "3 different atom types detected.";
		print "This utility is only designed for 2 atom types.";
		exit;
	}

	print "Found "n" configurations with "max+1" different atom types.";
	if (listall) {
		print "Listing all "n" configurations:";
		printf "conf";
		for (i=0;i<=max;i++)
			printf "\tc["i"]";
	}
	for (i=0;i<n;i++) {
		if (listall)
			printf "\n"i+1;
		for (j=0;j<=max;j++){
			c[i,j]=nconf[i,j]/nconf[i,"tot"];	
			if (listall)
				printf "\t%.2f",c[i,j];
		}
	}
	if (listall)
		printf "\n";

	avg=0;
	count=0;
	zeroconf=0;
	j=0;
	for (i=0;i<n;i++) {
		if (c[i,0]!=0 && c[i,0]!=1) {
			avg=avg+c[i,0]*nconf[i,"tot"];
			count=count+nconf[i,"tot"];
			nonzeroconf[j]=i;
			j++;
		} else 
		zeroconf++;
	}

	len=n-zeroconf;

	for (i=0;i<=len;i++) {
		concentration[i]=nconf[nonzeroconf[i],0];
		config[i]=nconf[nonzeroconf[i],"tot"];
	}

	sort(concentration,config,len,nonzeroconf);
	if (list)
		list_conf(config,concentration,len,nonzeroconf);


	# filter out multiple configurations with same concentration

	k=0;
	for (i=0;i<(len-1);i++) {
		j=1;
		done=false
		while (done==false) {
			done=true;
			if ((concentration[i]/config[i])==(concentration[i+j]/config[i+j])) {
				concentration[i]+=concentration[i+j];
				config[i]+=config[i+j];
				done=false;
				j++;
			} 
		}
		effconfig[k]=i;
		k++;
		i=i+j-1;
	}

	if ((concentration[len-2]/config[len-2])!=(concentration[len-1]/config[len-1])) {
		effconfig[k]=len-1;
		k++
		 }

		print "Found "k" effective configurations.";

		for (i=0;i<k;i++) {
			concentration[i]=concentration[effconfig[i]]/config[effconfig[i]];
			config[i]=config[effconfig[i]];
		}

		for (i=(k-1);i>1;i--) {
			reduce_nodes(i,concentration,config);	
			if (i==5)
				for (j=0;j<5;j++)
				c5[j]=concentration[j];
			if (i==4)
				for (j=0;j<4;j++)
				c4[j]=concentration[j];
			if (i==3)
				for (j=0;j<3;j++)
				c3[j]=concentration[j];
			if (i==2)
				for (j=0;j<2;j++)
				c2[j]=concentration[j];
		}

		print "Proposing the following composition nodes:";
		if ((n-zeroconf)<1)
			print "Only configurations with one atom type found.";
		else {
			printf "1 node:  %f\n",avg/count,1-avg/count;

		if ((n-zeroconf)<2)
			printf "2 nodes: only one mixed configuration found\n";
		else if ((n-zeroconf)==2)
			printf "2 nodes: "c[nonzeroconf[0],0] " "c[nonzeroconf[1],0]"\n";
		else if ((n-zeroconf)>2)
			printf "2 nodes: %f %f\n",c2[0],c2[1];

		if ((n-zeroconf)<3)
			printf "3 nodes: only two mixed configuration found\n";
		else if ((n-zeroconf)==3)
			printf "3 nodes: "c[nonzeroconf[0],0]" "c[nonzeroconf[1],0]" "c[nonzeroconf[2],0]"\n";
		else if ((n-zeroconf)>3)
			printf "3 nodes: %f %f %f\n", c3[0],c3[1],c3[2];

		if ((n-zeroconf)<4)
			printf "4 nodes: only three mixed configuration found\n";
		else if ((n-zeroconf)==4)
			printf "4 nodes: "c[nonzeroconf[0],0] " "c[nonzeroconf[1],0]" "c[nonzeroconf[2],0]" "c[nonzeroconf[3],0]"\n";
		else if ((n-zeroconf)>4)
			printf "4 nodes: %f %f %f %f\n",c4[0],c4[1],c4[2],c4[3];

		if ((n-zeroconf)<5)
			printf "5 nodes: only four mixed configuration found\n";
		else if ((n-zeroconf)==5)
			printf "5 nodes: "c[nonzeroconf[0],0] " "c[nonzeroconf[1],0]" "c[nonzeroconf[2],0]" "c[nonzeroconf[3],0]" "c[nonzeroconf[4],0]"\n";
		else if ((n-zeroconf)>5)
			printf "5 nodes: %f %f %f %f %f\n",c5[0],c5[1],c5[2],c5[3],c5[4]; 

	}
}
